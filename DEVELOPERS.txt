
BACKGROUND
	See www.mapr.com for details on the MapR Distribution for
	Hadoop and it's key differentiating features.


PROVISIONING MODEL
	Two different models are supported.  The default (captured
	in azuredeploy.json) loads the MapR Installer Service on 
	node0 of the requested infratructure and then executes
	an install on all provisioned nodes  using that serice.
	In this model, users can specify the cluster size along
	with the MapR version and license edition.

	Alternatively, you can use az_scripted.json that invokes
	a simple set of shell scripts to deploy a MapR M3 Edition
	cluster.  The only difference is the use of bootstrap_scripted.json
	instead of the bootstrap.json for the earlier deployment

	NOTE:
		The limitations of the Azure template structure make for 
		some complex "include" logic for the different instance types
		and other parameter settings.   The <instance>*.json files
		are almost identical ... just minor differences for the 
		storage configuration for each instance type (since different
		numbers of volumes are supported) and the different authentication
		mechanisms.

	A third mode is available with a custom Virtual Machine Image.
	This model was developed in line with the Amazon Marketplace 
	offering and the CloudFormation template.   The specification of
	the MapR image looks a lot like the specification of a core 
	Linux image (publisher, offer, and sku).   The problem is that
	for custom images the virtualMachines resource needs the following
	additional information 
        "plan": {
            "publisher": "[parameters('imagePublisher')]",
            "name" : "[parameters('imageSKU')]",
            "product": "[parameters('imageOffer')]"
        },

	If that information is used for the OpenLogic (or likely Canonical)
	core offerings, a template error is generated. 

TOOLS
	The Azure command line toolkit is available from Microsoft
	  http://azure.microsoft.com/en-us/documentation/articles/xplat-cli/#configure

	The command-line tool has two modes : “resource” and “service” .   
	Most of our work is via “resource” mode, so you may need to do
		azure config mode arm          # asm for “service” mode

	Log in to your azure account with
		azure login

	
TESTING
	The template makes heavy use of the github repository itself
	for accessing scripts and files during the deployment.  See
	the "scriptsUri" refereence in template json docs 
	(azuredeploy.json and az_scripted.json).   To test
	your modifications, you'll most likely want to clone the
	repository and update the scriptsUri link to point to a 
	location over which you have complete control.   This will
	likely be a WASB blob.   The "upload-repo*.sh" scripts offer
	examples of how to do that to a WASB blob that has been created
	in your account.

	To create a cluster, first create a fully defined set of 
	parameters for you cluster.   This is done by copying 
	azuredeploy-parameters.json to a writable file (say, ap.json) 
	and editing it for the values you wish (cluster size, instance
	type, etc.).

	Those parameters are used as input to one of the deployment 
	templates with the command :
		azure group create <RGname> <AzureRegion> \
			-f [az_scripted.json | azuredeploy.json ] \
			-e ap.json \
			-d <DeploymentName>

		azure group deployment create <DeploymentName> \
			-g <RGname> \
			-f [az_scripted.json | azuredeploy.json ] \
			-e ap.json 

		NOTE: There can be only one "Extensions" resource active
		within a resource group at any one time.  The implication
		of that is that you CANNOT deploy a second cluster in
		a resource group UNTIL the first deployment is complete !
		Remember that the MapR installer can take 30-40 minutes
		for a complete installation.


	Each Azure instance has an agent process that handles
	the extra steps defined in the template.   The scripts are
	downloaded to
		/var/lib/waagent/Microsoft*/download/0
	You can confirm that everything shows up there for proper
	execution of post-deployment configuration.

	The logs are in
		/var/log/azure/Microsoft*/<azure-ver>/*.log
	<azure-ver> is usually a simple multi-level version string
	(eg 1.2.2.0).   The key log for this deployment is
		extension.log

	When testing the MapR installer itself, it's often best to
	change the "installer-wrapper.sh" script to return success
	WITHOUT installing the MapR software.   You can access the 
	download/0 directory noted above to see the EXACT command line
	for the installation and duplicate that yourself.

AZURE RESOURCE NAMESPACE
	The templates create a series of resources within the specified
	resource group (vms, network interfaces, public IP addresses, etc).
	The basename for the resources is the cluster name parameter.
	Some resources (notably storage accounts and public IP addresses) have 
	a Global namespace, extending beyond the resource group.   For that 
	reason, you cannot create two clusters of the same name even in 
	different resource groups or subscriptions (you'll get a resource 
	creation error for the storage accounts).


TESTING MARKETPLACE UI
	You can upload the createUiDefinition file to the public github 
	and then test using the following URL.  Note the explicit link
	to our mapr/mapr-azure/master repository for now.
		(testing the private repository would require mapr/private-azure/master)

https://portal.azure.com/?clientOptimizations=false#blade/Microsoft_Azure_Compute/CreateMultiVmWizardBlade/internal_bladeCallId/anything/internal_bladeCallerParams/{"initialData":{},"providerConfig":{"createUiDefinition":"https%3A%2F%2Fraw.githubusercontent.com%2Fmapr%2Fmapr-azure%2Fmaster%2FcreateUiDefinition.json" }}

	And this one for the contents in mapr/azure (sandbox deployment)
https://portal.azure.com/?clientOptimizations=false#blade/Microsoft_Azure_Compute/CreateMultiVmWizardBlade/internal_bladeCallId/anything/internal_bladeCallerParams/{"initialData":{},"providerConfig":{"createUiDefinition":"https%3A%2F%2Fraw.githubusercontent.com%2Fmapr%2Fazure%2Fmaster%2FcreateUiDefinition.json" }}
