
	NOTE: This is a private development version (mapr/private-azure).

	As of 15-Mar-2016, there are two public repositories
	that "shadow" this development.   There is mapr/mapr-azure, 
	that leverages the core Installer-driven model for BYOL
	deployments.   There is also the mapr/azure repo, that is 
	based on the custom MapR images that will eventually allow
	for hourly licensing models.   

	Because the repo is private, the artifactsBaseUrl 
	CANNOT reference the github location directly.   This is 
	a limitation of Azure.   The work-around is to upload
	the files to a WASB blob and have the scripts reference 
	that.  The WASB bucket is not "public" in the same way
	that S3 buckets are, but any deployment from within the
	same Azure account that created the bucket should work.
		see upload-repo.sh and upload-repo-file.sh
    

The files in this repo support the templatized deployment of a 
MapR cluster within Azure. 
	
Summary:
	At the top level, the azuredeploy.json (or az_scripte.json) 
	template is selected, and a set of parameters provided 
	(aligning with the azuredeploy-parameters.json file).
		NOTE: Multiple other json files are "included" in the
		template, but other than the bootstrap*json files, there
		is little need to change any of them.

		The reason for all the similar json files defining the
		infrastructure options is that there is no conditional
		logic in Azure templates.   So instead of having "variables"
		in the template that control number of storage volumes
		independent of the instance type, everything winds up
		hard-coded based on file names (since the "include"
		logic will support variables).


DEVELOPERS.txt :
	More notes on the design model of the template.

AMI.txt :
	Notes on the design of the custom VM Image


azuredeploy.json :
bootstrap.json :
installer-wrapper.sh :
	Azure template for MapR installation driven by MapR Installer service.
	The installer-wrapper.sh does the following :
		- on every node, installs key pre-reqs and identifies disks for MapR-FS
		- on node0, deploys the installer service and runs the installation
		    using the deploy-mapr-cluster.py script (and MIDriver.py class)

az_scripted.json :
bootstrap_scripted.json :
azure-wrapper.sh :
	Azure template for scripted installation (see the deploy-mapr*.sh scripts).
		NOTE: This framework is best supported by a WASB copy of
		the github repo as the artifactsBaseUrl rather than the 
		public github repo itself.   We have seen many problems with
		download failures from https://raw.githubusercontent.com
		when multiple nodes are spun up in parallel

az_sandbox.json :
bootstrap_sandbox.json :
initiate-sandbox.sh :
	Azure template for installing a single-instance cluster
	based on a pre-defined image.  
		NOTE: the specification of an image is DIFFERENT for 
		a custom AMI vs the core CentOS AMI's ... so the
		<instance_type>*.json files must be modified slightly
		(see notes on "plan" resource).

<instance_type>*.json :
	Clones of the different instance configuration details.   The
	goal is to mazimize the storage capacity of each node (2 virtual
	disk spindles per virtual core).

network.json
	Defines the network resources

*storage.json
	Defines different storage resources for the node types.

mainTemplate.json :
createUiDefinition.json :
	Support for Azure Marketplace.   mainTemplate is simply  a clone
	of azuredeploy.json or az_scripted.json ... with the following
	changes :
		- remove default for "artifactsBaseUrl"
		- remove default and allowedValues for "location" parameter
		- remove default for "maprPassword" 
		- set default for "sshKey" and "adminPassword" to "" 
			(required because the GUI won't pass both in to template).
		- adjust default and allowedValues for "vmSize" if you
			need to constrain the set of supported VM's

gendist-sshkey.sh
gen-create-lock.sh
gen-lock-cluster.sh
	Helper scripts used in Installer-driven installation.
	gendist-sshkey.sh generates and distributes an ssh key for
	a user on the cluster (given PasswordAuthentication enabled
	ssh access between nodes).   The *lock*.sh scripts are used
	to DISABLE PasswordAuthentication on clusters after 
	installation (see AUTHENTICATION NOTES below)

azvmcreate.sh
azvmdelete.sh:
	Helper scripts to simplify the creation/deletion
	of a single VM image.   This tools have hard-coded
	storage accounts to be used since VM Images under
	development MUST share a storage account for the
	boot disk (see notes in Azure).


AUTHENTICATION NOTES
--------------------
The Azure template supports configuring the VM's with either
Password or PublicKey authentication for the admin user (the one
with sudo privileges).   The problem is that there is no way to
pass in the private half of the key ... so the installer MUST
use password authentication.   The model is this (all done
in the installer wrapper scripts)
	enable PasswordAuthentication on all nodes
	run gen-create-lock.sh script on all nodes
		generate a script (/tmp/lock.sh) to disable PasswordAuthentication
		update sudoers to allow password-less invocation of that script
	on NODE0 only
		generate/distribute an ssh key for Admin User and MapR User
		perform the installation (with adminuser and adminpassword)
		run gen-lock-cluster.sh
			uses key-access to remote nodes to run lock.sh script
				(remember, we set up key access with gendist-sshkey.sh

	
